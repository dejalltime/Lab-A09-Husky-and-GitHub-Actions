name: Validate terraform fmt

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout full history so we can diff
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Fetch the PR base commit
      - name: Fetch base for diff
        run: git fetch origin ${{ github.event.pull_request.base.sha }}

      # 3. Determine which .tf files changed between base and head
      - name: Determine changed Terraform files
        id: diff
        run: |
          TF_CHANGED=$(git diff --name-only \
            ${{ github.event.pull_request.base.sha }} \
            ${{ github.event.pull_request.head.sha }} \
            | grep '\.tf$' || true)
          echo "TF_CHANGED<<EOF" >> $GITHUB_ENV
          echo "$TF_CHANGED" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 4. (Optional) Show which files weâ€™ll check
      - name: Show changed .tf files
        run: |
          echo "Changed Terraform files:"
          echo "${{ env.TF_CHANGED }}"

      # 5. Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4

      # 6. Run the fmt check (fails if any file is mis-formatted)
      - name: Run terraform fmt -check
        run: |
          # If no .tf files changed, skip
          if [[ -z "${TF_CHANGED// }" ]]; then
            echo "No Terraform files changed; skipping fmt check."
            exit 0
          fi

          # Check formatting on all changed .tf files at once
          terraform fmt -check $TF_CHANGED
